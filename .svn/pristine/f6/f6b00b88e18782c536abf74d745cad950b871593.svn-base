package com.gome.splunk.controller;

import com.gome.splunk.entity.UserEntity;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.session.Session;
import org.apache.shiro.subject.Subject;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.util.Properties;

/**
 * Created by liubing-ds3 on 2016/5/17.
 * 权限管理模快
 */
@Controller
public class LoginController {


    @RequestMapping("login/login.do")
    @ResponseBody
    public String index(UserEntity user, HttpServletRequest request, HttpServletResponse response) {
        String data = "{\"status\":true}";
        Subject subject = SecurityUtils.getSubject();
        if (!subject.isAuthenticated()) {
            UsernamePasswordToken token = new UsernamePasswordToken(user.getUsername(), user.getPassword());
            try {
                //token.setRememberMe(true);
                subject.login(token);
                // 在web应用中,subject.getSession()和request.getSession()作用一样
                // session也一样,放入subject.getSession()和request.getSession()中的对象是共享的
                // 但是为了兼容性,推荐使用subject.getSession()
                Session session = subject.getSession(false);
                user.setNickname("admin".equals(user.getUsername()) ? "系统管理员" : "访客");
                session.setAttribute("USER", user);
//				HttpSession httpSession = request.getSession(false);
//				System.out.println(httpSession.getAttribute("USER"));
            } catch (Exception e) {
                data = "{\"status\":false}";
                e.printStackTrace();
            }
        }
        return data;
    }

    @RequestMapping("/index.do")
    public String index(HttpServletRequest request, HttpServletResponse response) {
        return "/menu";
    }

    @RequestMapping("/login.do")
    public String login(HttpServletRequest request, HttpServletResponse response) {

        return "login";
    }

   @RequestMapping("/logout.do")
    public String logout(HttpServletRequest request, HttpServletResponse response) {
       Properties ps = new Properties();
       String password = "123456";
       try {
           OutputStream fos = new FileOutputStream(new File(this.getClass().getClassLoader().getResource("config.properties").getFile()));
           ps.load(new FileInputStream(new File(this.getClass().getClassLoader().getResource("config.properties").getFile())));
           ps.setProperty("password",password);
           ps.store(fos,"UTF-8");
           fos.close();
       } catch (IOException e) {
           e.printStackTrace();
       }
        return "logout";

    }
    @RequestMapping("/error.do")
    public String error(HttpServletRequest request, HttpServletResponse response) {
        return "error";
    }

    @RequestMapping("/success.do")
    public String admin(HttpServletRequest request, HttpServletResponse response) {
        request.setAttribute("adminView", true);
        return "index";
    }

    @RequestMapping("/noAuth.do")
    public String noAuth(HttpServletRequest request, HttpServletResponse response) {
        return "index";
    }

}
